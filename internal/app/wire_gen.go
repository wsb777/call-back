// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/wsb777/call-back/http/routes"
	"github.com/wsb777/call-back/internal/config"
	"github.com/wsb777/call-back/internal/db"
	"github.com/wsb777/call-back/internal/db/repo"
	services2 "github.com/wsb777/call-back/internal/services/auth"
	"github.com/wsb777/call-back/internal/services/user"
	"github.com/wsb777/call-back/pkg/hasher"
	"github.com/wsb777/call-back/pkg/jwt"
	"net/http"
)

// Injectors from wire.go:

func InitHttpServer() (http.Handler, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	databasePG := db.NewDatabasePG(configConfig)
	sqlDB, err := db.ConnectDBProvider(databasePG)
	if err != nil {
		return nil, err
	}
	userRepo := repo.NewUserRepo(sqlDB)
	bCryptHasher := hasher.NewBCryptHasher()
	userSignUpService := services.NewUserSignUpService(userRepo, bCryptHasher)
	jwtEncoder := jwt.NewJWTEncoder(configConfig)
	authService := services2.NewAuthService(userRepo, bCryptHasher, jwtEncoder)
	jwtRepo := repo.NewJWTRepo(sqlDB)
	refreshService := services2.NewRefreshService(jwtRepo, bCryptHasher, jwtEncoder)
	handler := routes.NewHTTPServer(userSignUpService, authService, refreshService, jwtEncoder)
	return handler, nil
}
